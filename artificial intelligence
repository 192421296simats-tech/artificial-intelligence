import heapq

# Goal state
goal_state = [[1, 2, 3],
              [4, 5, 6],
              [7, 8, 0]]   # 0 = empty tile

# Heuristic: Manhattan distance
def manhattan_distance(state):
    distance = 0
    for i in range(3):
        for j in range(3):
            val = state[i][j]
            if val != 0:
                goal_x, goal_y = divmod(val - 1, 3)
                distance += abs(goal_x - i) + abs(goal_y - j)
    return distance

# Find position of blank (0)
def find_blank(state):
    for i in range(3):
        for j in range(3):
            if state[i][j] == 0:
                return i, j

# Generate next possible states
def get_neighbors(state):
    x, y = find_blank(state)
    moves = [(1,0), (-1,0), (0,1), (0,-1)]
    neighbors = []
    for dx, dy in moves:
        nx, ny = x + dx, y + dy
        if 0 <= nx < 3 and 0 <= ny < 3:
            new_state = [row[:] for row in state]
            new_state[x][y], new_state[nx][ny] = new_state[nx][ny], new_state[x][y]
            neighbors.append(new_state)
    return neighbors

# Convert state to tuple (for hashing)
def state_to_tuple(state):
    return tuple(tuple(row) for row in state)

# A* search
def solve_puzzle(start_state):
    pq = []
    heapq.heappush(pq, (manhattan_distance(start_state), 0, start_state, []))
    visited = set()
    
    while pq:
        est_total, cost, state, path = heapq.heappop(pq)
        if state == goal_state:
            return path + [state]
        
        state_tuple = state_to_tuple(state)
        if state_tuple in visited:
            continue
        visited.add(state_tuple)
        
        for neighbor in get_neighbors(state):
            heapq.heappush(pq, (cost + 1 + manhattan_distance(neighbor),
                                cost + 1,
                                neighbor,
                                path + [state]))
    return None

# Example
start_state = [[1, 2, 3],
               [4, 0, 6],
               [7, 5, 8]]

solution = solve_puzzle(start_state)

if solution:
    print("Steps to solve 8-Puzzle:\n")
    for step in solution:
        for row in step:
            print(row)
        print()
else:
    print("No solution found!")
