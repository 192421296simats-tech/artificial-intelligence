from collections import deque

goal = "123456780"   # 0 = blank tile

# Possible moves
moves = {0:[1,3], 1:[0,2,4], 2:[1,5],
         3:[0,4,6], 4:[1,3,5,7], 5:[2,4,8],
         6:[3,7], 7:[4,6,8], 8:[5,7]}

def solve(start):
    start = ''.join(str(x) for row in start for x in row)
    q = deque([(start, [])])
    seen = {start}
    while q:
        state, path = q.popleft()
        if state == goal:
            return path + [state]
        zero = state.index('0')
        for m in moves[zero]:
            lst = list(state)
            lst[zero], lst[m] = lst[m], lst[zero]
            new = ''.join(lst)
            if new not in seen:
                seen.add(new)
                q.append((new, path + [state]))
    return None

# Example start state
start_state = [[1,2,3],
               [4,0,6],
               [7,5,8]]

sol = solve(start_state)

for s in sol:
    for i in range(0,9,3):
        print(s[i:i+3])
    print()

        
        
